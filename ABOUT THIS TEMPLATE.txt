Azure Application Gateway is a web traffic load balancer that enables you to manage traffic to your web applications. It provides various features, such as URL-based routing, SSL termination, Web Application Firewall (WAF), and more, to enhance your application's performance and security.

Here’s a comprehensive guide on Azure Application Gateway Configuration and Settings:

1. Creating an Application Gateway
To create an Azure Application Gateway, follow these steps:

Sign in to the Azure portal.

Navigate to Application Gateway:

Go to "Create a resource".
Search for "Application Gateway".
Click "Create".
Configure Basic Settings:

Subscription: Select the Azure subscription.
Resource Group: Choose an existing resource group or create a new one.
Region: Choose the region where the Application Gateway will be deployed.
Name: Provide a name for your Application Gateway.
Tier: Choose between Standard, Standard_v2, or WAF_v2 (if you need Web Application Firewall capabilities).
SKU: Choose between Standard or WAF (Web Application Firewall).
Virtual Network: Select or create a Virtual Network (VNet).
Subnet: Select a subnet for your Application Gateway. Ensure that this subnet does not have any other resources (like VMs or Load Balancers) that might conflict.
Frontend Configuration:

Frontend IP Configuration: Choose Public (if the Application Gateway should be accessible externally) or Private (if you want it to be internal). Provide the required IP addresses.
Frontend Port: Set the port (usually port 80 for HTTP or 443 for HTTPS).
Backend Pool Configuration:

Backend Pool: Define a backend pool where the Application Gateway will route traffic. This could be:
Virtual machines
VMSS (Virtual Machine Scale Sets)
IP addresses
You need to define the backend server(s) that will handle incoming requests.
Routing Configuration:

Listener: Set up the listener for incoming traffic. You can create one listener for HTTP or HTTPS traffic.
Backend HTTP Settings: Specify settings like port, protocol (HTTP or HTTPS), and session persistence.
URL Path-Based Routing: Configure path-based routing rules if you need to route traffic based on specific URL patterns.
Health Probes:

Health Probes: Health probes are used to check the health of your backend servers. If a backend server fails the health probe, traffic is not routed to it.
You can configure probe settings like the interval, timeout, and threshold.
Review and Create:

Review the configurations and click Create to deploy your Application Gateway.
2. Key Settings for Azure Application Gateway
a) Frontend Configuration
Frontend IP: You can have a public or private IP address.
Public IP Address: For external traffic, you can associate a Public IP (static or dynamic) with the Application Gateway.
Private IP Address: For internal use, you can use a private IP within your VNet.
b) Backend Pool
Backend Server Group: A group of backend servers (like VMs, VMSS, or even external IPs).
DNS or IP Address: You can reference backend servers either by their DNS name or static IP addresses.
Health Probes: Ensures backend servers are operational and only healthy instances receive traffic.
c) Listeners
HTTP Listener: Handles incoming HTTP traffic on port 80.
HTTPS Listener: Handles secure traffic using SSL/TLS (on port 443).
You can configure SSL Termination (decrypt SSL traffic at the gateway) or End-to-End SSL (where SSL is terminated at the backend).
d) Routing Rules
URL Path-Based Routing: Routes requests to different backend pools based on the URL path. For example, requests to www.example.com/api/* can be routed to one backend pool, and www.example.com/admin/* to another.
Host-Based Routing: Routes based on the requested host (e.g., app1.example.com to one backend, and app2.example.com to another).
Custom Routing: You can create advanced routing rules to handle traffic based on headers, query strings, or source IP addresses.
e) Backend HTTP Settings
HTTP Settings: Configure how the gateway communicates with the backend servers:
Port: Default is port 80 for HTTP or 443 for HTTPS.
Protocol: HTTP or HTTPS (choose HTTPS if backend supports it).
Session Affinity: Enable to ensure that a client’s requests are sent to the same backend server.
Timeout: Set a timeout for backend communication.
Cookie-Based Affinity: Retain user sessions on the same backend server.
f) Health Probes
Health Probes: Regular checks on backend instances to ensure they are healthy.
Probe Type: HTTP, HTTPS, or TCP-based probes.
Interval: The frequency of probe requests.
Timeout: The time to wait for a probe response before considering the backend unhealthy.
Threshold: Number of failed probes before marking the backend as unhealthy.
g) Web Application Firewall (WAF)
WAF (Web Application Firewall): Protects your application from common threats and vulnerabilities (SQL injection, cross-site scripting, etc.).
WAF Policies: Set custom rules for blocking or alerting based on traffic patterns.
Detection Mode: Logs WAF alerts but does not block traffic.
Prevention Mode: Blocks malicious traffic as per WAF rules.
3. Advanced Features
a) SSL Termination
SSL termination can be done at the Application Gateway to offload SSL processing. The traffic between the Application Gateway and backend servers can either be unencrypted or also encrypted (end-to-end SSL).

SSL Profile: Define an SSL profile for configuring SSL certificates and ciphers used by the Application Gateway.
b) Custom SSL Certificates
You can upload custom SSL certificates for HTTPS listeners or choose a self-signed certificate. Azure Application Gateway supports the use of multiple SSL certificates for different domains.
c) Auto-scaling
Application Gateway Standard_v2 and WAF_v2 tiers support auto-scaling. It automatically adjusts the instance count based on the traffic volume.
d) Diagnostics and Logging
Diagnostic Logs: Enable diagnostic logging to monitor traffic and errors.
Access Logs: Capture incoming requests and responses.
Performance Logs: Provides metrics for the overall health of the Application Gateway.
Logs can be stored in Azure Monitor or Storage Accounts.
e) Custom Probe Settings
Custom Probes: You can set custom probes based on different parameters (HTTP status codes, response bodies, etc.) to monitor the backend.
4. Important Considerations
Scaling: For handling large amounts of traffic, use autoscaling and ensure backend resources are scaled appropriately.
Zones and Availability: Deploy in multiple Availability Zones for high availability.
DNS Configuration: Make sure the DNS records (A or CNAME) point to the correct Public IP address of your Application Gateway.
Cost: Costs are based on several factors, such as the tier (Standard vs. WAF), number of instances, and throughput units.
5. Common Use Cases for Azure Application Gateway
Load Balancing: Distribute traffic to multiple instances of a web application.
SSL Offloading: Offload SSL/TLS processing from backend servers.
URL Routing: Route traffic based on URL paths or hostnames.
Web Application Firewall: Protect applications from common security threats.
Microservices Traffic Routing: Route traffic based on the service requested (ideal for microservices architecture).
